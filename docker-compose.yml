version: '3.4'

services:
  orderservice.api:
    image: ${DOCKER_REGISTRY-}orderserviceapi
    container_name: orders.api
    build:
      context: .
      dockerfile: Backend/Services/OrderService/OrderService.API/Dockerfile
    ports:
      - 5001:5001
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5001
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}

      - STRIPESETTINGS__SECRETKEY=${STRIPESETTINGS__SECRETKEY}
      - STRIPESETTINGS__WEBHOOKKEY=${STRIPESETTINGS__WEBHOOKKEY}
      - STRIPESETTINGS__SUCCESSURL=${STRIPESETTINGS__SUCCESSURL}
      - STRIPESETTINGS__CANCELURL=${STRIPESETTINGS__CANCELURL}
    depends_on:
      - mongo

  userservice.api:
    image: ${DOCKER_REGISTRY-}userserviceapi
    container_name: users.api
    build:
      context: .
      dockerfile: Backend/Services/UserService/UserService.API/Dockerfile
    ports:
      - 5002:5002
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5002
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
      - EMAILOPTIONS__SENDEREMAIL=${EMAILOPTIONS__SENDEREMAIL}
      - EMAILOPTIONS__PASSWORD=${EMAILOPTIONS__PASSWORD}
    depends_on:
      - mssql

  mealservice.api:
    image: ${DOCKER_REGISTRY-}mealserviceapi
    container_name: meals.api
    build:
      context: .
      dockerfile: Backend/Services/MealService/MealService.API/Dockerfile
    ports:
      - 5003:5003
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5003
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
      - CLOUDINARY__APIKEY=${CLOUDINARY__APIKEY}
      - CLOUDINARY__APISECRET=${CLOUDINARY__APISECRET}
    depends_on:
      - mssql

  mealservice.grpc:
    image: ${DOCKER_REGISTRY-}mealservicegrpc
    container_name: meals.grpc
    build:
      context: .
      dockerfile: Backend/Services/MealService/MealService.GrpcServer/Dockerfile
    ports:
      - 5005:5005
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5005
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
    depends_on:
      - mssql

  cartservice.api:
    image: ${DOCKER_REGISTRY-}cartserviceapi
    container_name: cart.api
    build:
      context: .
      dockerfile: Backend/Services/CartService/CartService.API/Dockerfile
    ports:
      - 5004:5004
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5004
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
    depends_on:
      - mssql
      - redis
      - mealservice.grpc

  cartservice.grpc:
    image: ${DOCKER_REGISTRY-}cartservicegrpc
    container_name: cart.grpc
    build:
      context: .
      dockerfile: Backend/Services/CartService/CartService.GrpcServer/Dockerfile
    ports:
      - 5007:5007
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTPS_PORTS=5007
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${CERT_PASSWORD}
    depends_on:
      - redis


  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql_server
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - 1433:1433
    volumes:
      - mssql-data:/var/opt/mssql
    restart: always

  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: OrderDatabase
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    restart: always

  stripe-cli:
    image: stripe/stripe-cli:latest
    command: ["listen", "-H", "x-djstripe-webhook-secret: ${STRIPESETTINGS__WEBHOOKKEY}", "--forward-to", "https://orderservice.api:5001/api/payments/webhook", "--skip-verify"]
    depends_on:
      - orderservice.api
    environment:
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_DEVICE_NAME=${STRIPE_DEVICE_NAME}

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data


volumes:
  mongo-data:
    driver: local
  mssql-data:
    driver: local
  redis_data:
    driver: local
